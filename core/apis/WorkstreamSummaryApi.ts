/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SeededScoreIncrement,
  WorkstreamSummary,
} from '../models/index';
import {
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
    WorkstreamSummaryFromJSON,
    WorkstreamSummaryToJSON,
} from '../models/index';

export interface WorkstreamSummariesSpecificWorkstreamSummarySnapshotRequest {
    workstreamSummary: string;
    transferables?: boolean;
}

export interface WorkstreamSummaryAssociateAnchorRequest {
    workstreamSummary: string;
    anchor: string;
}

export interface WorkstreamSummaryAssociateAssetRequest {
    workstreamSummary: string;
    asset: string;
}

export interface WorkstreamSummaryAssociateConversationRequest {
    workstreamSummary: string;
    conversation: string;
}

export interface WorkstreamSummaryAssociatePersonRequest {
    workstreamSummary: string;
    person: string;
}

export interface WorkstreamSummaryAssociateRangeRequest {
    workstreamSummary: string;
    range: string;
}

export interface WorkstreamSummaryAssociateWebsiteRequest {
    workstreamSummary: string;
    website: string;
}

export interface WorkstreamSummaryAssociateWorkstreamEventRequest {
    workstreamSummary: string;
    workstreamEvent: string;
}

export interface WorkstreamSummaryDisassociateAnchorRequest {
    workstreamSummary: string;
    anchor: string;
}

export interface WorkstreamSummaryDisassociateAssetRequest {
    workstreamSummary: string;
    asset: string;
}

export interface WorkstreamSummaryDisassociateConversationRequest {
    workstreamSummary: string;
    conversation: string;
}

export interface WorkstreamSummaryDisassociatePersonRequest {
    workstreamSummary: string;
    person: string;
}

export interface WorkstreamSummaryDisassociateRangeRequest {
    workstreamSummary: string;
    range: string;
}

export interface WorkstreamSummaryDisassociateWebsiteRequest {
    workstreamSummary: string;
    website: string;
}

export interface WorkstreamSummaryDisassociateWorkstreamEventRequest {
    workstreamSummary: string;
    workstreamEvent: string;
}

export interface WorkstreamSummaryScoresIncrementRequest {
    workstreamSummary: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface WorkstreamSummaryUpdateRequest {
    transferables?: boolean;
    workstreamSummary?: WorkstreamSummary;
}

/**
 * 
 */
export class WorkstreamSummaryApi extends runtime.BaseAPI {

    /**
     * This will get a snapshot of a single workstream_summary.
     * /workstream_summary/{workstream_summary} [GET]
     */
    async workstreamSummariesSpecificWorkstreamSummarySnapshotRaw(requestParameters: WorkstreamSummariesSpecificWorkstreamSummarySnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamSummary>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummariesSpecificWorkstreamSummarySnapshot().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamSummaryFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a single workstream_summary.
     * /workstream_summary/{workstream_summary} [GET]
     */
    async workstreamSummariesSpecificWorkstreamSummarySnapshot(requestParameters: WorkstreamSummariesSpecificWorkstreamSummarySnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamSummary> {
        const response = await this.workstreamSummariesSpecificWorkstreamSummarySnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will associate a anchor with a workstream_summary. This will do the same thing as the anchor equivalent.
     * /workstream_summary/{workstream_summary}/anchors/associate/{anchor} [POST]
     */
    async workstreamSummaryAssociateAnchorRaw(requestParameters: WorkstreamSummaryAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling workstreamSummaryAssociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/anchors/associate/{anchor}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a anchor with a workstream_summary. This will do the same thing as the anchor equivalent.
     * /workstream_summary/{workstream_summary}/anchors/associate/{anchor} [POST]
     */
    async workstreamSummaryAssociateAnchor(requestParameters: WorkstreamSummaryAssociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate an asset with a workstream_summary. This will do the same thing as the asset equivalent.
     * /workstream_summary/{workstream_summary}/assets/associate/{asset} [POST]
     */
    async workstreamSummaryAssociateAssetRaw(requestParameters: WorkstreamSummaryAssociateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateAsset().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling workstreamSummaryAssociateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/assets/associate/{asset}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate an asset with a workstream_summary. This will do the same thing as the asset equivalent.
     * /workstream_summary/{workstream_summary}/assets/associate/{asset} [POST]
     */
    async workstreamSummaryAssociateAsset(requestParameters: WorkstreamSummaryAssociateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateAssetRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate an conversation with a workstream_summary. This will do the same thing as the conversation equivalent.
     * /workstream_summary/{workstream_summary}/conversations/associate/{conversation} [POST]
     */
    async workstreamSummaryAssociateConversationRaw(requestParameters: WorkstreamSummaryAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling workstreamSummaryAssociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/conversations/associate/{conversation}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate an conversation with a workstream_summary. This will do the same thing as the conversation equivalent.
     * /workstream_summary/{workstream_summary}/conversations/associate/{conversation} [POST]
     */
    async workstreamSummaryAssociateConversation(requestParameters: WorkstreamSummaryAssociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate an person with a workstream_summary. This will do the same thing as the person equivalent.
     * /workstream_summary/{workstream_summary}/persons/associate/{person} [POST]
     */
    async workstreamSummaryAssociatePersonRaw(requestParameters: WorkstreamSummaryAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling workstreamSummaryAssociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/persons/associate/{person}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate an person with a workstream_summary. This will do the same thing as the person equivalent.
     * /workstream_summary/{workstream_summary}/persons/associate/{person} [POST]
     */
    async workstreamSummaryAssociatePerson(requestParameters: WorkstreamSummaryAssociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a range with a workstream_summary. This will do the same thing as the range equivalent.
     * /workstream_summary/{workstream_summary}/ranges/associate/{range} [POST]
     */
    async workstreamSummaryAssociateRangeRaw(requestParameters: WorkstreamSummaryAssociateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateRange().'
            );
        }

        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling workstreamSummaryAssociateRange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/ranges/associate/{range}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a range with a workstream_summary. This will do the same thing as the range equivalent.
     * /workstream_summary/{workstream_summary}/ranges/associate/{range} [POST]
     */
    async workstreamSummaryAssociateRange(requestParameters: WorkstreamSummaryAssociateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateRangeRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a website with a workstream_summary. This will do the same thing as the website equivalent.
     * /workstream_summary/{workstream_summary}/websites/associate/{website} [POST]
     */
    async workstreamSummaryAssociateWebsiteRaw(requestParameters: WorkstreamSummaryAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamSummaryAssociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/websites/associate/{website}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a website with a workstream_summary. This will do the same thing as the website equivalent.
     * /workstream_summary/{workstream_summary}/websites/associate/{website} [POST]
     */
    async workstreamSummaryAssociateWebsite(requestParameters: WorkstreamSummaryAssociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will associate a workstream_summary with a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_summary/{workstream_summary}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamSummaryAssociateWorkstreamEventRaw(requestParameters: WorkstreamSummaryAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryAssociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamSummaryAssociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/workstream_events/associate/{workstream_event}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will associate a workstream_summary with a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_summary/{workstream_summary}/workstream_events/associate/{workstream_event} [POST]
     */
    async workstreamSummaryAssociateWorkstreamEvent(requestParameters: WorkstreamSummaryAssociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryAssociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a anchor from a workstream_summary. This will do the same thing as the anchor equivalent.
     * /workstream_summary/{workstream_summary}/anchors/disassociate/{anchor} [POST]
     */
    async workstreamSummaryDisassociateAnchorRaw(requestParameters: WorkstreamSummaryDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateAnchor().'
            );
        }

        if (requestParameters['anchor'] == null) {
            throw new runtime.RequiredError(
                'anchor',
                'Required parameter "anchor" was null or undefined when calling workstreamSummaryDisassociateAnchor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/anchors/disassociate/{anchor}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters['anchor']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a anchor from a workstream_summary. This will do the same thing as the anchor equivalent.
     * /workstream_summary/{workstream_summary}/anchors/disassociate/{anchor} [POST]
     */
    async workstreamSummaryDisassociateAnchor(requestParameters: WorkstreamSummaryDisassociateAnchorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateAnchorRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a asset from a workstream_summary. This will do the same thing as the asset equivalent.
     * /workstream_summary/{workstream_summary}/assets/disassociate/{asset} [POST]
     */
    async workstreamSummaryDisassociateAssetRaw(requestParameters: WorkstreamSummaryDisassociateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateAsset().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling workstreamSummaryDisassociateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/assets/disassociate/{asset}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters['asset']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a asset from a workstream_summary. This will do the same thing as the asset equivalent.
     * /workstream_summary/{workstream_summary}/assets/disassociate/{asset} [POST]
     */
    async workstreamSummaryDisassociateAsset(requestParameters: WorkstreamSummaryDisassociateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateAssetRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a conversation from a workstream_summary. This will do the same thing as the conversation equivalent.
     * /workstream_summary/{workstream_summary}/conversations/disassociate/{conversation} [POST]
     */
    async workstreamSummaryDisassociateConversationRaw(requestParameters: WorkstreamSummaryDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling workstreamSummaryDisassociateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/conversations/disassociate/{conversation}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters['conversation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a conversation from a workstream_summary. This will do the same thing as the conversation equivalent.
     * /workstream_summary/{workstream_summary}/conversations/disassociate/{conversation} [POST]
     */
    async workstreamSummaryDisassociateConversation(requestParameters: WorkstreamSummaryDisassociateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a person from a workstream_summary. This will do the same thing as the person equivalent.
     * /workstream_summary/{workstream_summary}/persons/disassociate/{person} [POST]
     */
    async workstreamSummaryDisassociatePersonRaw(requestParameters: WorkstreamSummaryDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling workstreamSummaryDisassociatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/persons/disassociate/{person}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters['person']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a person from a workstream_summary. This will do the same thing as the person equivalent.
     * /workstream_summary/{workstream_summary}/persons/disassociate/{person} [POST]
     */
    async workstreamSummaryDisassociatePerson(requestParameters: WorkstreamSummaryDisassociatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociatePersonRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a range from a workstream_summary. This will do the same thing as the range equivalent.
     * /workstream_summary/{workstream_summary}/ranges/disassociate/{range} [POST]
     */
    async workstreamSummaryDisassociateRangeRaw(requestParameters: WorkstreamSummaryDisassociateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateRange().'
            );
        }

        if (requestParameters['range'] == null) {
            throw new runtime.RequiredError(
                'range',
                'Required parameter "range" was null or undefined when calling workstreamSummaryDisassociateRange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/ranges/disassociate/{range}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"range"}}`, encodeURIComponent(String(requestParameters['range']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a range from a workstream_summary. This will do the same thing as the range equivalent.
     * /workstream_summary/{workstream_summary}/ranges/disassociate/{range} [POST]
     */
    async workstreamSummaryDisassociateRange(requestParameters: WorkstreamSummaryDisassociateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateRangeRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a website from a workstream_summary. This will do the same thing as the website equivalent.
     * /workstream_summary/{workstream_summary}/websites/disassociate/{website} [POST]
     */
    async workstreamSummaryDisassociateWebsiteRaw(requestParameters: WorkstreamSummaryDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateWebsite().'
            );
        }

        if (requestParameters['website'] == null) {
            throw new runtime.RequiredError(
                'website',
                'Required parameter "website" was null or undefined when calling workstreamSummaryDisassociateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/websites/disassociate/{website}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters['website']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a website from a workstream_summary. This will do the same thing as the website equivalent.
     * /workstream_summary/{workstream_summary}/websites/disassociate/{website} [POST]
     */
    async workstreamSummaryDisassociateWebsite(requestParameters: WorkstreamSummaryDisassociateWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * This will enable us to disassociate a workstream_summary from a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_summary/{workstream_summary}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamSummaryDisassociateWorkstreamEventRaw(requestParameters: WorkstreamSummaryDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryDisassociateWorkstreamEvent().'
            );
        }

        if (requestParameters['workstreamEvent'] == null) {
            throw new runtime.RequiredError(
                'workstreamEvent',
                'Required parameter "workstreamEvent" was null or undefined when calling workstreamSummaryDisassociateWorkstreamEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/workstream_events/disassociate/{workstream_event}`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))).replace(`{${"workstream_event"}}`, encodeURIComponent(String(requestParameters['workstreamEvent']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will enable us to disassociate a workstream_summary from a workstream_event. This will do the same thing as the workstream_event equivalent.
     * /workstream_summary/{workstream_summary}/workstream_events/disassociate/{workstream_event} [POST]
     */
    async workstreamSummaryDisassociateWorkstreamEvent(requestParameters: WorkstreamSummaryDisassociateWorkstreamEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryDisassociateWorkstreamEventRaw(requestParameters, initOverrides);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/workstream_summary/{workstream_summary}/scores/increment\' [POST]
     */
    async workstreamSummaryScoresIncrementRaw(requestParameters: WorkstreamSummaryScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workstreamSummary'] == null) {
            throw new runtime.RequiredError(
                'workstreamSummary',
                'Required parameter "workstreamSummary" was null or undefined when calling workstreamSummaryScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workstream_summary/{workstream_summary}/scores/increment`.replace(`{${"workstream_summary"}}`, encodeURIComponent(String(requestParameters['workstreamSummary']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/workstream_summary/{workstream_summary}/scores/increment\' [POST]
     */
    async workstreamSummaryScoresIncrement(requestParameters: WorkstreamSummaryScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workstreamSummaryScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will update a specific workstream_summary.
     * /workstream_summary/update [POST]
     */
    async workstreamSummaryUpdateRaw(requestParameters: WorkstreamSummaryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkstreamSummary>> {
        const queryParameters: any = {};

        if (requestParameters['transferables'] != null) {
            queryParameters['transferables'] = requestParameters['transferables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workstream_summary/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkstreamSummaryToJSON(requestParameters['workstreamSummary']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkstreamSummaryFromJSON(jsonValue));
    }

    /**
     * This will update a specific workstream_summary.
     * /workstream_summary/update [POST]
     */
    async workstreamSummaryUpdate(requestParameters: WorkstreamSummaryUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkstreamSummary> {
        const response = await this.workstreamSummaryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
