/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Annotation,
  SeededScoreIncrement,
} from '../models/index';
import {
    AnnotationFromJSON,
    AnnotationToJSON,
    SeededScoreIncrementFromJSON,
    SeededScoreIncrementToJSON,
} from '../models/index';

export interface AnnotationScoresIncrementRequest {
    annotation: string;
    seededScoreIncrement?: SeededScoreIncrement;
}

export interface AnnotationSpecificAnnotationSnapshotRequest {
    annotation: string;
}

export interface AnnotationUpdateRequest {
    annotation?: Annotation;
}

/**
 * 
 */
export class AnnotationApi extends runtime.BaseAPI {

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/annotation/{annotation}/scores/increment\' [POST]
     */
    async annotationScoresIncrementRaw(requestParameters: AnnotationScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['annotation'] == null) {
            throw new runtime.RequiredError(
                'annotation',
                'Required parameter "annotation" was null or undefined when calling annotationScoresIncrement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotation/{annotation}/scores/increment`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters['annotation']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeededScoreIncrementToJSON(requestParameters['seededScoreIncrement']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/annotation/{annotation}/scores/increment\' [POST]
     */
    async annotationScoresIncrement(requestParameters: AnnotationScoresIncrementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.annotationScoresIncrementRaw(requestParameters, initOverrides);
    }

    /**
     * This will get a snapshot of a specific annotation.
     * /annotation/{annotation} [GET]
     */
    async annotationSpecificAnnotationSnapshotRaw(requestParameters: AnnotationSpecificAnnotationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Annotation>> {
        if (requestParameters['annotation'] == null) {
            throw new runtime.RequiredError(
                'annotation',
                'Required parameter "annotation" was null or undefined when calling annotationSpecificAnnotationSnapshot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotation/{annotation}`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters['annotation']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     * This will get a snapshot of a specific annotation.
     * /annotation/{annotation} [GET]
     */
    async annotationSpecificAnnotationSnapshot(requestParameters: AnnotationSpecificAnnotationSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Annotation> {
        const response = await this.annotationSpecificAnnotationSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will update a specific annotation.
     * /annotation/update [POST]
     */
    async annotationUpdateRaw(requestParameters: AnnotationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Annotation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationToJSON(requestParameters['annotation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     * This will update a specific annotation.
     * /annotation/update [POST]
     */
    async annotationUpdate(requestParameters: AnnotationUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Annotation> {
        const response = await this.annotationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
