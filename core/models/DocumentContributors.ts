/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { DocumentContributor } from './DocumentContributor';
import {
    DocumentContributorFromJSON,
    DocumentContributorFromJSONTyped,
    DocumentContributorToJSON,
} from './DocumentContributor';

/**
 * This is a plural representation of the DocumentContributor
 * @export
 * @interface DocumentContributors
 */
export interface DocumentContributors {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof DocumentContributors
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {Array<DocumentContributor>}
     * @memberof DocumentContributors
     */
    iterable: Array<DocumentContributor>;
}

/**
 * Check if a given object implements the DocumentContributors interface.
 */
export function instanceOfDocumentContributors(value: object): value is DocumentContributors {
    if (!('iterable' in value) || value['iterable'] === undefined) return false;
    return true;
}

export function DocumentContributorsFromJSON(json: any): DocumentContributors {
    return DocumentContributorsFromJSONTyped(json, false);
}

export function DocumentContributorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentContributors {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'iterable': ((json['iterable'] as Array<any>).map(DocumentContributorFromJSON)),
    };
}

export function DocumentContributorsToJSON(value?: DocumentContributors | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'iterable': ((value['iterable'] as Array<any>).map(DocumentContributorToJSON)),
    };
}

