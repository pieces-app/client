/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedTags } from './FlattenedTags';
import {
    FlattenedTagsFromJSON,
    FlattenedTagsFromJSONTyped,
    FlattenedTagsToJSON,
} from './FlattenedTags';
import type { ReferencedConversation } from './ReferencedConversation';
import {
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
} from './ReferencedConversation';
import type { Seeds } from './Seeds';
import {
    SeedsFromJSON,
    SeedsFromJSONTyped,
    SeedsToJSON,
} from './Seeds';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { ReferencedWebsite } from './ReferencedWebsite';
import {
    ReferencedWebsiteFromJSON,
    ReferencedWebsiteFromJSONTyped,
    ReferencedWebsiteToJSON,
} from './ReferencedWebsite';
import type { ReferencedAnchor } from './ReferencedAnchor';
import {
    ReferencedAnchorFromJSON,
    ReferencedAnchorFromJSONTyped,
    ReferencedAnchorToJSON,
} from './ReferencedAnchor';
import type { ReferencedPerson } from './ReferencedPerson';
import {
    ReferencedPersonFromJSON,
    ReferencedPersonFromJSONTyped,
    ReferencedPersonToJSON,
} from './ReferencedPerson';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
} from './FlattenedConversations';
import type { FlattenedWebsites } from './FlattenedWebsites';
import {
    FlattenedWebsitesFromJSON,
    FlattenedWebsitesFromJSONTyped,
    FlattenedWebsitesToJSON,
} from './FlattenedWebsites';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
} from './FlattenedWorkstreamSummaries';
import type { ReferencedAsset } from './ReferencedAsset';
import {
    ReferencedAssetFromJSON,
    ReferencedAssetFromJSONTyped,
    ReferencedAssetToJSON,
} from './ReferencedAsset';
import type { ReferencedTag } from './ReferencedTag';
import {
    ReferencedTagFromJSON,
    ReferencedTagFromJSONTyped,
    ReferencedTagToJSON,
} from './ReferencedTag';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
} from './FlattenedAssets';
import type { ReferencedWorkstreamSummary } from './ReferencedWorkstreamSummary';
import {
    ReferencedWorkstreamSummaryFromJSON,
    ReferencedWorkstreamSummaryFromJSONTyped,
    ReferencedWorkstreamSummaryToJSON,
} from './ReferencedWorkstreamSummary';
import type { Seed } from './Seed';
import {
    SeedFromJSON,
    SeedFromJSONTyped,
    SeedToJSON,
} from './Seed';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
} from './FlattenedPersons';
import type { WorkstreamSuggestions } from './WorkstreamSuggestions';
import {
    WorkstreamSuggestionsFromJSON,
    WorkstreamSuggestionsFromJSONTyped,
    WorkstreamSuggestionsToJSON,
} from './WorkstreamSuggestions';
import type { FlattenedAnchors } from './FlattenedAnchors';
import {
    FlattenedAnchorsFromJSON,
    FlattenedAnchorsFromJSONTyped,
    FlattenedAnchorsToJSON,
} from './FlattenedAnchors';

/**
 * This is an individual material that is apart of the workstream feed.
 * might want to also consider plural uuids ie top websites/tags/and others..
 * 
 * related: this is an optional field that will only be calculated for first degree relationships.
 *          ie. an anchor may have related.iterable.first.persons that are not associated but related.
 *          via the workstream patturn engine.
 * 
 * current: if current is defined then this is the current viewed object
 * @export
 * @interface WorkstreamSuggestion
 */
export interface WorkstreamSuggestion {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof WorkstreamSuggestion
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {ReferencedWorkstreamSummary}
     * @memberof WorkstreamSuggestion
     */
    summary?: ReferencedWorkstreamSummary;
    /**
     * 
     * @type {ReferencedAsset}
     * @memberof WorkstreamSuggestion
     */
    asset?: ReferencedAsset;
    /**
     * 
     * @type {ReferencedTag}
     * @memberof WorkstreamSuggestion
     */
    tag?: ReferencedTag;
    /**
     * 
     * @type {ReferencedWebsite}
     * @memberof WorkstreamSuggestion
     */
    website?: ReferencedWebsite;
    /**
     * 
     * @type {ReferencedAnchor}
     * @memberof WorkstreamSuggestion
     */
    anchor?: ReferencedAnchor;
    /**
     * 
     * @type {ReferencedConversation}
     * @memberof WorkstreamSuggestion
     */
    conversation?: ReferencedConversation;
    /**
     * 
     * @type {ReferencedPerson}
     * @memberof WorkstreamSuggestion
     */
    person?: ReferencedPerson;
    /**
     * 
     * @type {Seed}
     * @memberof WorkstreamSuggestion
     */
    seed?: Seed;
    /**
     * 
     * @type {Seeds}
     * @memberof WorkstreamSuggestion
     */
    seeds?: Seeds;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof WorkstreamSuggestion
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof WorkstreamSuggestion
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {FlattenedTags}
     * @memberof WorkstreamSuggestion
     */
    tags?: FlattenedTags;
    /**
     * 
     * @type {FlattenedWebsites}
     * @memberof WorkstreamSuggestion
     */
    websites?: FlattenedWebsites;
    /**
     * 
     * @type {FlattenedAnchors}
     * @memberof WorkstreamSuggestion
     */
    anchors?: FlattenedAnchors;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof WorkstreamSuggestion
     */
    conversations?: FlattenedConversations;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof WorkstreamSuggestion
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {WorkstreamSuggestions}
     * @memberof WorkstreamSuggestion
     */
    related?: WorkstreamSuggestions;
    /**
     * 
     * @type {WorkstreamSuggestion}
     * @memberof WorkstreamSuggestion
     */
    current?: WorkstreamSuggestion;
}

/**
 * Check if a given object implements the WorkstreamSuggestion interface.
 */
export function instanceOfWorkstreamSuggestion(value: object): value is WorkstreamSuggestion {
    return true;
}

export function WorkstreamSuggestionFromJSON(json: any): WorkstreamSuggestion {
    return WorkstreamSuggestionFromJSONTyped(json, false);
}

export function WorkstreamSuggestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkstreamSuggestion {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'summary': json['summary'] == null ? undefined : ReferencedWorkstreamSummaryFromJSON(json['summary']),
        'asset': json['asset'] == null ? undefined : ReferencedAssetFromJSON(json['asset']),
        'tag': json['tag'] == null ? undefined : ReferencedTagFromJSON(json['tag']),
        'website': json['website'] == null ? undefined : ReferencedWebsiteFromJSON(json['website']),
        'anchor': json['anchor'] == null ? undefined : ReferencedAnchorFromJSON(json['anchor']),
        'conversation': json['conversation'] == null ? undefined : ReferencedConversationFromJSON(json['conversation']),
        'person': json['person'] == null ? undefined : ReferencedPersonFromJSON(json['person']),
        'seed': json['seed'] == null ? undefined : SeedFromJSON(json['seed']),
        'seeds': json['seeds'] == null ? undefined : SeedsFromJSON(json['seeds']),
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'tags': json['tags'] == null ? undefined : FlattenedTagsFromJSON(json['tags']),
        'websites': json['websites'] == null ? undefined : FlattenedWebsitesFromJSON(json['websites']),
        'anchors': json['anchors'] == null ? undefined : FlattenedAnchorsFromJSON(json['anchors']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'related': json['related'] == null ? undefined : WorkstreamSuggestionsFromJSON(json['related']),
        'current': json['current'] == null ? undefined : WorkstreamSuggestionFromJSON(json['current']),
    };
}

export function WorkstreamSuggestionToJSON(value?: WorkstreamSuggestion | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'summary': ReferencedWorkstreamSummaryToJSON(value['summary']),
        'asset': ReferencedAssetToJSON(value['asset']),
        'tag': ReferencedTagToJSON(value['tag']),
        'website': ReferencedWebsiteToJSON(value['website']),
        'anchor': ReferencedAnchorToJSON(value['anchor']),
        'conversation': ReferencedConversationToJSON(value['conversation']),
        'person': ReferencedPersonToJSON(value['person']),
        'seed': SeedToJSON(value['seed']),
        'seeds': SeedsToJSON(value['seeds']),
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'assets': FlattenedAssetsToJSON(value['assets']),
        'tags': FlattenedTagsToJSON(value['tags']),
        'websites': FlattenedWebsitesToJSON(value['websites']),
        'anchors': FlattenedAnchorsToJSON(value['anchors']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
        'persons': FlattenedPersonsToJSON(value['persons']),
        'related': WorkstreamSuggestionsToJSON(value['related']),
        'current': WorkstreamSuggestionToJSON(value['current']),
    };
}

