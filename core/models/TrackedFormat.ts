/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { Classification } from './Classification';
import {
    ClassificationFromJSON,
    ClassificationFromJSONTyped,
    ClassificationToJSON,
} from './Classification';

/**
 * A minimal format to send to Mixpanel
 * @export
 * @interface TrackedFormat
 */
export interface TrackedFormat {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TrackedFormat
     */
    schema?: EmbeddedModelSchema;
    /**
     * The UUID of the format
     * @type {string}
     * @memberof TrackedFormat
     */
    id: string;
    /**
     * 
     * @type {Classification}
     * @memberof TrackedFormat
     */
    classification: Classification;
    /**
     * 
     * @type {Role}
     * @memberof TrackedFormat
     */
    role: Role;
    /**
     * The UUID of the asset associated
     * @type {string}
     * @memberof TrackedFormat
     */
    asset: string;
    /**
     * 
     * @type {boolean}
     * @memberof TrackedFormat
     */
    fragment: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TrackedFormat
     */
    file: boolean;
}

/**
 * Check if a given object implements the TrackedFormat interface.
 */
export function instanceOfTrackedFormat(value: object): value is TrackedFormat {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('classification' in value) || value['classification'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('asset' in value) || value['asset'] === undefined) return false;
    if (!('fragment' in value) || value['fragment'] === undefined) return false;
    if (!('file' in value) || value['file'] === undefined) return false;
    return true;
}

export function TrackedFormatFromJSON(json: any): TrackedFormat {
    return TrackedFormatFromJSONTyped(json, false);
}

export function TrackedFormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackedFormat {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'classification': ClassificationFromJSON(json['classification']),
        'role': RoleFromJSON(json['role']),
        'asset': json['asset'],
        'fragment': json['fragment'],
        'file': json['file'],
    };
}

export function TrackedFormatToJSON(value?: TrackedFormat | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'classification': ClassificationToJSON(value['classification']),
        'role': RoleToJSON(value['role']),
        'asset': value['asset'],
        'fragment': value['fragment'],
        'file': value['file'],
    };
}

