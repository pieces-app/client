/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedConversations } from './FlattenedConversations';
import {
    FlattenedConversationsFromJSON,
    FlattenedConversationsFromJSONTyped,
    FlattenedConversationsToJSON,
} from './FlattenedConversations';
import type { FlattenedWorkstreamSummaries } from './FlattenedWorkstreamSummaries';
import {
    FlattenedWorkstreamSummariesFromJSON,
    FlattenedWorkstreamSummariesFromJSONTyped,
    FlattenedWorkstreamSummariesToJSON,
} from './FlattenedWorkstreamSummaries';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './Score';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './GroupedTimestamp';

/**
 * This is an identified Range, this is ONLY needed when using plural rangedTimestamps, in order to ensure granularity(add/modify/delete)
 * @export
 * @interface Range
 */
export interface Range {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Range
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Range
     */
    id: string;
    /**
     * 
     * @type {Score}
     * @memberof Range
     */
    score?: Score;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Range
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Range
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Range
     */
    to?: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Range
     */
    from?: GroupedTimestamp;
    /**
     * 
     * @type {boolean}
     * @memberof Range
     */
    between?: boolean;
    /**
     * 
     * @type {FlattenedWorkstreamSummaries}
     * @memberof Range
     */
    summaries?: FlattenedWorkstreamSummaries;
    /**
     * 
     * @type {FlattenedConversations}
     * @memberof Range
     */
    conversations?: FlattenedConversations;
}

/**
 * Check if a given object implements the Range interface.
 */
export function instanceOfRange(value: object): value is Range {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    return true;
}

export function RangeFromJSON(json: any): Range {
    return RangeFromJSONTyped(json, false);
}

export function RangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Range {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'to': json['to'] == null ? undefined : GroupedTimestampFromJSON(json['to']),
        'from': json['from'] == null ? undefined : GroupedTimestampFromJSON(json['from']),
        'between': json['between'] == null ? undefined : json['between'],
        'summaries': json['summaries'] == null ? undefined : FlattenedWorkstreamSummariesFromJSON(json['summaries']),
        'conversations': json['conversations'] == null ? undefined : FlattenedConversationsFromJSON(json['conversations']),
    };
}

export function RangeToJSON(value?: Range | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'score': ScoreToJSON(value['score']),
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'to': GroupedTimestampToJSON(value['to']),
        'from': GroupedTimestampToJSON(value['from']),
        'between': value['between'],
        'summaries': FlattenedWorkstreamSummariesToJSON(value['summaries']),
        'conversations': FlattenedConversationsToJSON(value['conversations']),
    };
}

