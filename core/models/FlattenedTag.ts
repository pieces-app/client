/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './Score';
import type { FlattenedAssets } from './FlattenedAssets';
import {
    FlattenedAssetsFromJSON,
    FlattenedAssetsFromJSONTyped,
    FlattenedAssetsToJSON,
} from './FlattenedAssets';
import type { TagCategoryEnum } from './TagCategoryEnum';
import {
    TagCategoryEnumFromJSON,
    TagCategoryEnumFromJSONTyped,
    TagCategoryEnumToJSON,
} from './TagCategoryEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { Relationship } from './Relationship';
import {
    RelationshipFromJSON,
    RelationshipFromJSONTyped,
    RelationshipToJSON,
} from './Relationship';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './MechanismEnum';
import type { FlattenedPersons } from './FlattenedPersons';
import {
    FlattenedPersonsFromJSON,
    FlattenedPersonsFromJSONTyped,
    FlattenedPersonsToJSON,
} from './FlattenedPersons';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './GroupedTimestamp';

/**
 * This is a Flattened Version of a Tag.
 * @export
 * @interface FlattenedTag
 */
export interface FlattenedTag {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof FlattenedTag
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof FlattenedTag
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FlattenedTag
     */
    text: string;
    /**
     * This is a Map<String, MechanismEnum> where the the key is an asset id.
     * @type {{ [key: string]: MechanismEnum; }}
     * @memberof FlattenedTag
     */
    mechanisms?: { [key: string]: MechanismEnum; };
    /**
     * 
     * @type {FlattenedAssets}
     * @memberof FlattenedTag
     */
    assets?: FlattenedAssets;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedTag
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedTag
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof FlattenedTag
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {TagCategoryEnum}
     * @memberof FlattenedTag
     */
    category: TagCategoryEnum;
    /**
     * 
     * @type {Relationship}
     * @memberof FlattenedTag
     */
    relationship?: Relationship;
    /**
     * This is an optional value that will keep track of the number of times this has been interacted with.
     * @type {number}
     * @memberof FlattenedTag
     */
    interactions?: number;
    /**
     * 
     * @type {FlattenedPersons}
     * @memberof FlattenedTag
     */
    persons?: FlattenedPersons;
    /**
     * 
     * @type {Score}
     * @memberof FlattenedTag
     */
    score?: Score;
}

/**
 * Check if a given object implements the FlattenedTag interface.
 */
export function instanceOfFlattenedTag(value: object): value is FlattenedTag {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    return true;
}

export function FlattenedTagFromJSON(json: any): FlattenedTag {
    return FlattenedTagFromJSONTyped(json, false);
}

export function FlattenedTagFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlattenedTag {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'text': json['text'],
        'mechanisms': json['mechanisms'] == null ? undefined : (mapValues(json['mechanisms'], MechanismEnumFromJSON)),
        'assets': json['assets'] == null ? undefined : FlattenedAssetsFromJSON(json['assets']),
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'category': TagCategoryEnumFromJSON(json['category']),
        'relationship': json['relationship'] == null ? undefined : RelationshipFromJSON(json['relationship']),
        'interactions': json['interactions'] == null ? undefined : json['interactions'],
        'persons': json['persons'] == null ? undefined : FlattenedPersonsFromJSON(json['persons']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
    };
}

export function FlattenedTagToJSON(value?: FlattenedTag | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'text': value['text'],
        'mechanisms': value['mechanisms'] == null ? undefined : (mapValues(value['mechanisms'], MechanismEnumToJSON)),
        'assets': FlattenedAssetsToJSON(value['assets']),
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'category': TagCategoryEnumToJSON(value['category']),
        'relationship': RelationshipToJSON(value['relationship']),
        'interactions': value['interactions'],
        'persons': FlattenedPersonsToJSON(value['persons']),
        'score': ScoreToJSON(value['score']),
    };
}

