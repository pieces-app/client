/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
} from './FlattenedConversationMessages';
import type { AnnotationTypeEnum } from './AnnotationTypeEnum';
import {
    AnnotationTypeEnumFromJSON,
    AnnotationTypeEnumFromJSONTyped,
    AnnotationTypeEnumToJSON,
} from './AnnotationTypeEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './MechanismEnum';

/**
 * This is the percursor to a fully referenced Annotation.
 * @export
 * @interface SeededAnnotation
 */
export interface SeededAnnotation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededAnnotation
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof SeededAnnotation
     */
    mechanism?: MechanismEnum;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    asset?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    person?: string;
    /**
     * 
     * @type {AnnotationTypeEnum}
     * @memberof SeededAnnotation
     */
    type: AnnotationTypeEnum;
    /**
     * This is the text of the annotation.
     * @type {string}
     * @memberof SeededAnnotation
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    model?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeededAnnotation
     */
    pseudo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeededAnnotation
     */
    favorited?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    anchor?: string;
    /**
     * 
     * @type {string}
     * @memberof SeededAnnotation
     */
    conversation?: string;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof SeededAnnotation
     */
    messages?: FlattenedConversationMessages;
}

/**
 * Check if a given object implements the SeededAnnotation interface.
 */
export function instanceOfSeededAnnotation(value: object): value is SeededAnnotation {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function SeededAnnotationFromJSON(json: any): SeededAnnotation {
    return SeededAnnotationFromJSONTyped(json, false);
}

export function SeededAnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededAnnotation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'mechanism': json['mechanism'] == null ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'asset': json['asset'] == null ? undefined : json['asset'],
        'person': json['person'] == null ? undefined : json['person'],
        'type': AnnotationTypeEnumFromJSON(json['type']),
        'text': json['text'],
        'model': json['model'] == null ? undefined : json['model'],
        'pseudo': json['pseudo'] == null ? undefined : json['pseudo'],
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'anchor': json['anchor'] == null ? undefined : json['anchor'],
        'conversation': json['conversation'] == null ? undefined : json['conversation'],
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
    };
}

export function SeededAnnotationToJSON(value?: SeededAnnotation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'asset': value['asset'],
        'person': value['person'],
        'type': AnnotationTypeEnumToJSON(value['type']),
        'text': value['text'],
        'model': value['model'],
        'pseudo': value['pseudo'],
        'favorited': value['favorited'],
        'anchor': value['anchor'],
        'conversation': value['conversation'],
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
    };
}

