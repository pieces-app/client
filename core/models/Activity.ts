/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeededConnectorTracking } from './SeededConnectorTracking';
import {
    SeededConnectorTrackingFromJSON,
    SeededConnectorTrackingFromJSONTyped,
    SeededConnectorTrackingToJSON,
} from './SeededConnectorTracking';
import type { FlattenedAsset } from './FlattenedAsset';
import {
    FlattenedAssetFromJSON,
    FlattenedAssetFromJSONTyped,
    FlattenedAssetToJSON,
} from './FlattenedAsset';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './MechanismEnum';
import type { FlattenedFormat } from './FlattenedFormat';
import {
    FlattenedFormatFromJSON,
    FlattenedFormatFromJSONTyped,
    FlattenedFormatToJSON,
} from './FlattenedFormat';
import type { FlattenedUserProfile } from './FlattenedUserProfile';
import {
    FlattenedUserProfileFromJSON,
    FlattenedUserProfileFromJSONTyped,
    FlattenedUserProfileToJSON,
} from './FlattenedUserProfile';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './GroupedTimestamp';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
} from './Application';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Activity
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    id: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Activity
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Activity
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {SeededConnectorTracking}
     * @memberof Activity
     */
    event: SeededConnectorTracking;
    /**
     * 
     * @type {Application}
     * @memberof Activity
     */
    application: Application;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Activity
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {FlattenedAsset}
     * @memberof Activity
     */
    asset?: FlattenedAsset;
    /**
     * 
     * @type {FlattenedUserProfile}
     * @memberof Activity
     */
    user?: FlattenedUserProfile;
    /**
     * 
     * @type {FlattenedFormat}
     * @memberof Activity
     */
    format?: FlattenedFormat;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Activity
     */
    mechanism: MechanismEnum;
    /**
     * This is the numeric value assigned for this activity event. This number is based off the the type of activity event calcaulated on the server side.DO NOT MODIFY. To see what the value qualilates to, please refer to the function within the common sdk. The number here is based on the fib series. from 0 -> infinity but rn there arnt any value over 8.
     * @type {number}
     * @memberof Activity
     */
    rank?: number;
}

/**
 * Check if a given object implements the Activity interface.
 */
export function instanceOfActivity(value: object): value is Activity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('event' in value) || value['event'] === undefined) return false;
    if (!('application' in value) || value['application'] === undefined) return false;
    if (!('mechanism' in value) || value['mechanism'] === undefined) return false;
    return true;
}

export function ActivityFromJSON(json: any): Activity {
    return ActivityFromJSONTyped(json, false);
}

export function ActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Activity {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'event': SeededConnectorTrackingFromJSON(json['event']),
        'application': ApplicationFromJSON(json['application']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'asset': json['asset'] == null ? undefined : FlattenedAssetFromJSON(json['asset']),
        'user': json['user'] == null ? undefined : FlattenedUserProfileFromJSON(json['user']),
        'format': json['format'] == null ? undefined : FlattenedFormatFromJSON(json['format']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'rank': json['rank'] == null ? undefined : json['rank'],
    };
}

export function ActivityToJSON(value?: Activity | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'event': SeededConnectorTrackingToJSON(value['event']),
        'application': ApplicationToJSON(value['application']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'asset': FlattenedAssetToJSON(value['asset']),
        'user': FlattenedUserProfileToJSON(value['user']),
        'format': FlattenedFormatToJSON(value['format']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'rank': value['rank'],
    };
}

