/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeededAnchor } from './SeededAnchor';
import {
    SeededAnchorFromJSON,
    SeededAnchorFromJSONTyped,
    SeededAnchorToJSON,
} from './SeededAnchor';
import type { SeededPerson } from './SeededPerson';
import {
    SeededPersonFromJSON,
    SeededPersonFromJSONTyped,
    SeededPersonToJSON,
} from './SeededPerson';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { SeededAsset } from './SeededAsset';
import {
    SeededAssetFromJSON,
    SeededAssetFromJSONTyped,
    SeededAssetToJSON,
} from './SeededAsset';
import type { SeededWebsite } from './SeededWebsite';
import {
    SeededWebsiteFromJSON,
    SeededWebsiteFromJSONTyped,
    SeededWebsiteToJSON,
} from './SeededWebsite';

/**
 * A seed Model used to wrap a format or asset
 * 
 * Note: we will expand this now to support additional paramerters.
 * 
 * Note: however if create an asset, only pass in the asset, not passing in an asset in this case will cause the endpoint to fail.
 * 
 * TODO: for a breaking change update the type enum here to add support for the additional materials or remove it entirely.
 * @export
 * @interface Seed
 */
export interface Seed {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Seed
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {SeededAsset}
     * @memberof Seed
     */
    asset?: SeededAsset;
    /**
     * 
     * @type {SeededPerson}
     * @memberof Seed
     */
    person?: SeededPerson;
    /**
     * 
     * @type {SeededAnchor}
     * @memberof Seed
     */
    anchor?: SeededAnchor;
    /**
     * 
     * @type {SeededWebsite}
     * @memberof Seed
     */
    website?: SeededWebsite;
    /**
     * 
     * @type {string}
     * @memberof Seed
     */
    type?: SeedTypeEnum;
}


/**
 * @export
 */
export const SeedTypeEnum = {
    Format: 'SEEDED_FORMAT',
    Asset: 'SEEDED_ASSET'
} as const;
export type SeedTypeEnum = typeof SeedTypeEnum[keyof typeof SeedTypeEnum];


/**
 * Check if a given object implements the Seed interface.
 */
export function instanceOfSeed(value: object): value is Seed {
    return true;
}

export function SeedFromJSON(json: any): Seed {
    return SeedFromJSONTyped(json, false);
}

export function SeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Seed {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'asset': json['asset'] == null ? undefined : SeededAssetFromJSON(json['asset']),
        'person': json['person'] == null ? undefined : SeededPersonFromJSON(json['person']),
        'anchor': json['anchor'] == null ? undefined : SeededAnchorFromJSON(json['anchor']),
        'website': json['website'] == null ? undefined : SeededWebsiteFromJSON(json['website']),
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function SeedToJSON(value?: Seed | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'asset': SeededAssetToJSON(value['asset']),
        'person': SeededPersonToJSON(value['person']),
        'anchor': SeededAnchorToJSON(value['anchor']),
        'website': SeededWebsiteToJSON(value['website']),
        'type': value['type'],
    };
}

