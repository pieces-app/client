/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';

/**
 * This will let us know what capabilities the model is aloud to be used for.
 * @export
 * @interface ModelCapabilities
 */
export interface ModelCapabilities {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof ModelCapabilities
     */
    schema?: EmbeddedModelSchema;
    /**
     * True if model is able to support live context and any other temporally powered RAG Capabilities i.e. "What did I do yesterday?"
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    temporal?: boolean;
    /**
     * True if the model can leverage images and graphical material files in it's context window
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    images?: boolean;
    /**
     * True if the model can leverage videos files in it's context window
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    videos?: boolean;
    /**
     * True if the model can leverage code/text/other files in it's context window
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    documents?: boolean;
    /**
     * True if the model can leverage entire code bases/snippetized code bases in its context window
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    codebases?: boolean;
    /**
     * True if the model can leverage saved assets & their metadata in its context window.
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    assets?: boolean;
    /**
     * True if the model can leverage websites in its context window.
     * @type {boolean}
     * @memberof ModelCapabilities
     */
    websites?: boolean;
}

/**
 * Check if a given object implements the ModelCapabilities interface.
 */
export function instanceOfModelCapabilities(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelCapabilitiesFromJSON(json: any): ModelCapabilities {
    return ModelCapabilitiesFromJSONTyped(json, false);
}

export function ModelCapabilitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelCapabilities {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'temporal': !exists(json, 'temporal') ? undefined : json['temporal'],
        'images': !exists(json, 'images') ? undefined : json['images'],
        'videos': !exists(json, 'videos') ? undefined : json['videos'],
        'documents': !exists(json, 'documents') ? undefined : json['documents'],
        'codebases': !exists(json, 'codebases') ? undefined : json['codebases'],
        'assets': !exists(json, 'assets') ? undefined : json['assets'],
        'websites': !exists(json, 'websites') ? undefined : json['websites'],
    };
}

export function ModelCapabilitiesToJSON(value?: ModelCapabilities | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'temporal': value.temporal,
        'images': value.images,
        'videos': value.videos,
        'documents': value.documents,
        'codebases': value.codebases,
        'assets': value.assets,
        'websites': value.websites,
    };
}

