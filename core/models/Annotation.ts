/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferencedConversation } from './ReferencedConversation';
import {
    ReferencedConversationFromJSON,
    ReferencedConversationFromJSONTyped,
    ReferencedConversationToJSON,
} from './ReferencedConversation';
import type { Score } from './Score';
import {
    ScoreFromJSON,
    ScoreFromJSONTyped,
    ScoreToJSON,
} from './Score';
import type { ReferencedAsset } from './ReferencedAsset';
import {
    ReferencedAssetFromJSON,
    ReferencedAssetFromJSONTyped,
    ReferencedAssetToJSON,
} from './ReferencedAsset';
import type { FlattenedConversationMessages } from './FlattenedConversationMessages';
import {
    FlattenedConversationMessagesFromJSON,
    FlattenedConversationMessagesFromJSONTyped,
    FlattenedConversationMessagesToJSON,
} from './FlattenedConversationMessages';
import type { AnnotationTypeEnum } from './AnnotationTypeEnum';
import {
    AnnotationTypeEnumFromJSON,
    AnnotationTypeEnumFromJSONTyped,
    AnnotationTypeEnumToJSON,
} from './AnnotationTypeEnum';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';
import type { ReferencedWorkstreamSummary } from './ReferencedWorkstreamSummary';
import {
    ReferencedWorkstreamSummaryFromJSON,
    ReferencedWorkstreamSummaryFromJSONTyped,
    ReferencedWorkstreamSummaryToJSON,
} from './ReferencedWorkstreamSummary';
import type { MechanismEnum } from './MechanismEnum';
import {
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
} from './MechanismEnum';
import type { ReferencedModel } from './ReferencedModel';
import {
    ReferencedModelFromJSON,
    ReferencedModelFromJSONTyped,
    ReferencedModelToJSON,
} from './ReferencedModel';
import type { GroupedTimestamp } from './GroupedTimestamp';
import {
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
} from './GroupedTimestamp';
import type { ReferencedAnchor } from './ReferencedAnchor';
import {
    ReferencedAnchorFromJSON,
    ReferencedAnchorFromJSONTyped,
    ReferencedAnchorToJSON,
} from './ReferencedAnchor';
import type { ReferencedPerson } from './ReferencedPerson';
import {
    ReferencedPersonFromJSON,
    ReferencedPersonFromJSONTyped,
    ReferencedPersonToJSON,
} from './ReferencedPerson';

/**
 * An Annotation is the replacement for descriptions, this will enable comments, description, summaries and many more.
 * 
 * person on here is a reference to the description/comment/annotation about a person
 * 
 * NOTE: person here is NOT the creator of the annotaion. but rather the descriptions of the person.
 * NOTE****: if we want to add "who" wrote the annotation, we will want to add a new field on here called author && will need to also layer in behavior the enable an author(person) and an asset both being referenced(ensure you check the side effect in the AssetsFacade.delete)
 * @export
 * @interface Annotation
 */
export interface Annotation {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Annotation
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    id: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Annotation
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Annotation
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Annotation
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Annotation
     */
    mechanism?: MechanismEnum;
    /**
     * 
     * @type {ReferencedAsset}
     * @memberof Annotation
     */
    asset?: ReferencedAsset;
    /**
     * 
     * @type {ReferencedPerson}
     * @memberof Annotation
     */
    person?: ReferencedPerson;
    /**
     * 
     * @type {AnnotationTypeEnum}
     * @memberof Annotation
     */
    type: AnnotationTypeEnum;
    /**
     * This is the text of the annotation.
     * @type {string}
     * @memberof Annotation
     */
    text: string;
    /**
     * 
     * @type {ReferencedModel}
     * @memberof Annotation
     */
    model?: ReferencedModel;
    /**
     * 
     * @type {boolean}
     * @memberof Annotation
     */
    pseudo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Annotation
     */
    favorited?: boolean;
    /**
     * 
     * @type {ReferencedAnchor}
     * @memberof Annotation
     */
    anchor?: ReferencedAnchor;
    /**
     * 
     * @type {ReferencedConversation}
     * @memberof Annotation
     */
    conversation?: ReferencedConversation;
    /**
     * 
     * @type {Score}
     * @memberof Annotation
     */
    score?: Score;
    /**
     * 
     * @type {FlattenedConversationMessages}
     * @memberof Annotation
     */
    messages?: FlattenedConversationMessages;
    /**
     * 
     * @type {ReferencedWorkstreamSummary}
     * @memberof Annotation
     */
    summary?: ReferencedWorkstreamSummary;
}

/**
 * Check if a given object implements the Annotation interface.
 */
export function instanceOfAnnotation(value: object): value is Annotation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function AnnotationFromJSON(json: any): Annotation {
    return AnnotationFromJSONTyped(json, false);
}

export function AnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Annotation {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': json['deleted'] == null ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'mechanism': json['mechanism'] == null ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'asset': json['asset'] == null ? undefined : ReferencedAssetFromJSON(json['asset']),
        'person': json['person'] == null ? undefined : ReferencedPersonFromJSON(json['person']),
        'type': AnnotationTypeEnumFromJSON(json['type']),
        'text': json['text'],
        'model': json['model'] == null ? undefined : ReferencedModelFromJSON(json['model']),
        'pseudo': json['pseudo'] == null ? undefined : json['pseudo'],
        'favorited': json['favorited'] == null ? undefined : json['favorited'],
        'anchor': json['anchor'] == null ? undefined : ReferencedAnchorFromJSON(json['anchor']),
        'conversation': json['conversation'] == null ? undefined : ReferencedConversationFromJSON(json['conversation']),
        'score': json['score'] == null ? undefined : ScoreFromJSON(json['score']),
        'messages': json['messages'] == null ? undefined : FlattenedConversationMessagesFromJSON(json['messages']),
        'summary': json['summary'] == null ? undefined : ReferencedWorkstreamSummaryFromJSON(json['summary']),
    };
}

export function AnnotationToJSON(value?: Annotation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'id': value['id'],
        'created': GroupedTimestampToJSON(value['created']),
        'updated': GroupedTimestampToJSON(value['updated']),
        'deleted': GroupedTimestampToJSON(value['deleted']),
        'mechanism': MechanismEnumToJSON(value['mechanism']),
        'asset': ReferencedAssetToJSON(value['asset']),
        'person': ReferencedPersonToJSON(value['person']),
        'type': AnnotationTypeEnumToJSON(value['type']),
        'text': value['text'],
        'model': ReferencedModelToJSON(value['model']),
        'pseudo': value['pseudo'],
        'favorited': value['favorited'],
        'anchor': ReferencedAnchorToJSON(value['anchor']),
        'conversation': ReferencedConversationToJSON(value['conversation']),
        'score': ScoreToJSON(value['score']),
        'messages': FlattenedConversationMessagesToJSON(value['messages']),
        'summary': ReferencedWorkstreamSummaryToJSON(value['summary']),
    };
}

