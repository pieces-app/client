/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedModelSchema } from './EmbeddedModelSchema';
import {
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
} from './EmbeddedModelSchema';

/**
 * This is a model that will hold relavent information in relation to an interaction(ONLY CLICK/TAP) analytics event(usage). If you want to register an event that relates to an interaction with the key then register a Keyboard Event.
 * 
 * @export
 * @interface TrackedInteractionEvent
 */
export interface TrackedInteractionEvent {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof TrackedInteractionEvent
     */
    schema?: EmbeddedModelSchema;
    /**
     * (optional) a description of this button that was clicked. or maybe what it did.
     * @type {string}
     * @memberof TrackedInteractionEvent
     */
    description: string;
    /**
     * This is an identifer that will allow the developer to know what unique button/field was interacted with.
     * @type {string}
     * @memberof TrackedInteractionEvent
     */
    element?: string;
}

/**
 * Check if a given object implements the TrackedInteractionEvent interface.
 */
export function instanceOfTrackedInteractionEvent(value: object): value is TrackedInteractionEvent {
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function TrackedInteractionEventFromJSON(json: any): TrackedInteractionEvent {
    return TrackedInteractionEventFromJSONTyped(json, false);
}

export function TrackedInteractionEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackedInteractionEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'schema': json['schema'] == null ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'description': json['description'],
        'element': json['element'] == null ? undefined : json['element'],
    };
}

export function TrackedInteractionEventToJSON(value?: TrackedInteractionEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value['schema']),
        'description': value['description'],
        'element': value['element'],
    };
}

